#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 8
#define SDF_TEXTURE_SIZE 256
#define TWO_PI 6.28318530718

//#define SHARED_MEMORY

#define MOLTEN_CORE

#ifdef SHARED_MEMORY
	#define SHARED_MEMORY_NORMALS
#endif

#ifdef MOLTEN_CORE
	#define MAIN_DISPLACEMENT_FUNCTION moltenCoreDisplacement
	#define KERNEL_DISPLACEMENT_FUNCTION moltenCoreKernel
	#define KERNEL_HALF_SIZE 1
#elif BISMUTH

#endif

#ifdef SHARED_MEMORY
	#define SHARED_SIZE (WORKGROUP_SIZE + (KERNEL_HALF_SIZE * 2))
#endif

layout(local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = WORKGROUP_SIZE) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

layout(set = 2, binding = 0, r32f) coherent uniform image3D SourceMeshSDF;
layout(set = 3, binding = 0, r32f) coherent uniform image3D TargetMeshSDF;
layout(set = 4, binding = 0, rgba8) coherent uniform image3D VectorField;

#ifdef SHARED_MEMORY
	shared float sharedData[SHARED_SIZE * SHARED_SIZE * SHARED_SIZE];
#endif

float KernelSum = 0;

struct CurrentState {
	float sdf;
	vec3 position;
	vec3 normal;
	ivec3 coord;
};

struct KernelInput {
	float neighborSDF;
	vec3 normalizedOffset;
	vec3 neighborNormal;
	vec3 neighborCoord;
};

#ifdef SHARED_MEMORY
float sharedSDF(ivec3 p, ivec3 refCoord) {
	ivec3 difference = refCoord - p;
	ivec3 refModCoord = refCoord % ivec3(WORKGROUP_SIZE);
	ivec3 refSharedCoord = refModCoord + ivec3(KERNEL_HALF_SIZE);
	ivec3 sharedCoord = refSharedCoord - difference;
	int flatIndex = sharedCoord.x + (SHARED_SIZE * sharedCoord.y) + (SHARED_SIZE * SHARED_SIZE * sharedCoord.z);
	return sharedData[flatIndex];
}
#endif

float sdf(ivec3 p) {
	return imageLoad(SourceMeshSDF, p).x;
}

float activation(float sdf, float min, float max) {
	float x = clamp((sdf - min) / (max - min), 0.0, 1.0);
	return clamp((1 + cos((x+.5)*6.28)) / 2.10, 0.0, 1.0);
	//return clamp(1.0 - abs(smoothstep(min, max, sdf) - .5) / .5, 0.0, 1.0);
}

vec3 sdfNormal(ivec3 pos, int offset) {
	ivec2 eps = ivec2(offset, 0);

#ifdef SHARED_MEMORY_NORMALS
	float dx = sharedSDF(pos + eps.xyy, pos) - sharedSDF(pos - eps.xyy, pos);
	float dy = sharedSDF(pos + eps.yxy, pos) - sharedSDF(pos - eps.yxy, pos);
	float dz = sharedSDF(pos + eps.yyx, pos) - sharedSDF(pos - eps.yyx, pos);
#else
	float dx = sdf(pos + eps.xyy) - sdf(pos - eps.xyy);
	float dy = sdf(pos + eps.yxy) - sdf(pos - eps.yxy);
	float dz = sdf(pos + eps.yyx) - sdf(pos - eps.yyx);
#endif

	return normalize(vec3(dx, dy, dz));
}

vec3 sdfCurvature(ivec3 pos, int offset) {
	ivec2 eps = ivec2(offset, 0);

	vec3 dx = sdfNormal(pos + eps.xyy, offset) - sdfNormal(pos - eps.xyy, offset);
	vec3 dy = sdfNormal(pos + eps.yxy, offset) - sdfNormal(pos - eps.yxy, offset);
	vec3 dz = sdfNormal(pos + eps.yyx, offset) - sdfNormal(pos - eps.yyx, offset);

	return normalize(dx + dy + dz);
}

//Curvature in 7-tap (more accurate)
float curv2(ivec3 p, int offset)
{
    ivec2 eps = ivec2(offset, 0);

    float t1 = sdf(p + eps.xyy), t2 = sdf(p - eps.xyy);
    float t3 = sdf(p + eps.yxy), t4 = sdf(p - eps.yxy);
    float t5 = sdf(p + eps.yyx), t6 = sdf(p - eps.yyx);
    
    return (.25 / offset) * (t1 + t2 + t3 + t4 + t5 + t6 - 6.0 * sdf(p));
}
vec3 curlSDF(ivec3 p, int offset)
{
	int normalOffset = 1;
	ivec2 eps = ivec2(offset, 0);

	float dXdy = sdfNormal(p + eps.yxy, normalOffset).x - sdfNormal(p - eps.yxy, normalOffset).x;
	float dXdz = sdfNormal(p + eps.yyx, normalOffset).x - sdfNormal(p - eps.yyx, normalOffset).x;

	float dYdx = sdfNormal(p + eps.xyy, normalOffset).y - sdfNormal(p - eps.xyy, normalOffset).y;
	float dYdz = sdfNormal(p + eps.yyx, normalOffset).y - sdfNormal(p - eps.yyx, normalOffset).y;

	float dZdx = sdfNormal(p + eps.xyy, normalOffset).z - sdfNormal(p - eps.xyy, normalOffset).z;
	float dZdy = sdfNormal(p + eps.yxy, normalOffset).z - sdfNormal(p - eps.yxy, normalOffset).z;

	return normalize(vec3(dZdy - dYdz, dXdz - dZdx, dYdx - dXdy));
}
//float kernel(ivec3 x, vec3 dx, float sdf, vec3 normal, out float weight) {
//	float neighbor = imageLoad(SourceMeshSDF, x).x;
//	float activation = clamp(1.0 - abs(smoothstep(0.0, .05, neighbor) - .5) / .5, 0.0, 1.0);

//	if(activation > 0.0)
//	{
//		vec3 n = sdfNormal(x, 15);

//		// We want to grow when the normals are different
//		float NdotN = 1.0 - smoothstep(0.2, 0.45, dot(normal, n));
//		dx = abs(dx);

//		float manhattanDistance = pow((dx.x + dx.y + dx.z), 4.0);
//		float curvatureGrowth = .05 * -NdotN * manhattanDistance;
//		float borderGrowth = -(neighbor - sdf) * .35 * manhattanDistance;

//		return activation * (curvatureGrowth + borderGrowth) * deltaTime * .1;
//	}

//	return 0.0;
//}

// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}


// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct( uint m ) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat( m );       // Range [1:2]
    return f - 1.0;                        // Range [0:1]
}

float random(inout uint seed)
{
	seed = hash(seed);
	return floatConstruct(seed);
}

vec3 cosineWeightedSample(vec3 normal, inout uint seed) {
	float u1 = random(seed);
	float u2 = random(seed);

	float r = sqrt(u1);
	float theta = TWO_PI * u2;

	float x = r * cos(theta);
	float y = r * sin(theta);
	float z = sqrt(max(0.0, 1.0 - u1));

	vec3 up = vec3(0.0, 0.0, 1.0);
	vec3 v = normalize(cross(normal, up));
	vec3 u = normalize(cross(v, normal));

	return normalize(v * x + u * y + normal * z);
}


/**************************************************************
* KERNEL DISPLACEMENT
*************************************************************/

float voidKernel(CurrentState current, KernelInput kInput) {
	return 0.0;
}

float relaxation(CurrentState current, KernelInput kInput, float strength) {
	KernelSum += 1.0;
	return (kInput.neighborSDF - current.sdf) * strength;
}

float moltenCoreKernel(CurrentState current, KernelInput kInput) {
	//float perlin = imageLoad(VectorField, current.coord).a;
	return relaxation(current, kInput, 1.5) * deltaTime;
}

/**************************************************************
* VECTOR FIELD DISPLACEMENT
*************************************************************/

float curvatureDisplacement(CurrentState current, float strength) {
	//vec3 c = sdfCurvature(current.coord, 15);
	float c = curv2(current.coord, 20);
	//float d = max(0.0, -dot(c, current.normal)) * -strength * deltaTime;
	return max(0.0, c) * -strength * deltaTime;
}

float repulsionDisplacement(CurrentState current, float delta, float strength) {
	uint numSamples = 8;
	uint seed = current.coord.x + SDF_TEXTURE_SIZE * current.coord.y + SDF_TEXTURE_SIZE * SDF_TEXTURE_SIZE * current.coord.z + int(totalTime * 1000.0);
	float totalRepulsion = 0.0;
	for (uint i = 0; i < numSamples; i++) {
		vec3 direction = cosineWeightedSample(current.normal, seed);
		float d = delta * (random(seed) * .5 + .5);
		vec3 compared = current.position + (direction * d);
		ivec3 comparedCoord = ivec3(compared * SDF_TEXTURE_SIZE);
		float repulsion = imageLoad(SourceMeshSDF, comparedCoord).x * dot(current.normal, direction) * (1.0 - (d/delta));
		totalRepulsion += -min(0.0, repulsion);
	}
	return (totalRepulsion / float(numSamples)) * strength * deltaTime;
}

float gravityDisplacement(CurrentState current, float gravity) {
	return max(0.0, -current.normal.y) * -gravity * deltaTime;
}

float vectorFieldDisplacement(CurrentState current, float strength) {
	vec3 field = imageLoad(VectorField, current.coord).xyz;
	return max(0.0, -dot(field, current.normal)) * -strength * deltaTime;
}

float noiseExpansionDisplacement(CurrentState current, float strength) {
	float expansion = smoothstep(.7, 1.0, imageLoad(VectorField, current.coord).a);
	return -expansion * strength * deltaTime;
}

float expansionDisplacement(CurrentState current, float expansion) {
	return -expansion * deltaTime;
}

float moltenCoreDisplacement(CurrentState current) {

	float repulsion = repulsionDisplacement(current, 0.025, 550.0) * activation(current.sdf, 0.0, .1);
	float curvature = curvatureDisplacement(current, 10.0) * activation(current.sdf, -.1, .2);
	float expansion = expansionDisplacement(current, .01);
	float curl = vectorFieldDisplacement(current, .0065);
	float noise = noiseExpansionDisplacement(current, .15);
	float gravity = gravityDisplacement(current, 10.0) * activation(current.sdf, -.1, .6);
	//return repulsion + curvature + expansion - gravityDisplacement(current, 1.0) * activation(current.sdf, 0.0, .1);

	return repulsion + curvature;// gravity + repulsion; 
}

/**************************************************************
* MAIN 
*************************************************************/
void CreateKernelInput(ivec3 coord, ivec3 x, out KernelInput kInput) {
	kInput.neighborCoord = x;

#ifdef KERNEL_NORMAL
	kInput.neighborNormal = sdfNormal(x, 2);
#endif

	kInput.normalizedOffset = vec3(x - coord) / float(KERNEL_HALF_SIZE);

#ifdef SHARED_MEMORY
	kInput.neighborSDF = sharedSDF(x, coord);
#else
	kInput.neighborSDF = sdf(x);
#endif
}

#ifdef SHARED_MEMORY
void populateSharedMemory(ivec3 coord) {
	ivec3 modCoord = coord % ivec3(WORKGROUP_SIZE);
	ivec3 sharedCoord = modCoord + ivec3(KERNEL_HALF_SIZE);
	int flatIndex = sharedCoord.x + (SHARED_SIZE * sharedCoord.y) + (SHARED_SIZE * SHARED_SIZE * sharedCoord.z);

	// Populate myself and my neighbors if border
	//vec3 floatSign = step(modCoord, vec3(0)) * -1.0 + step(vec3(WORKGROUP_SIZE - 1), modCoord);
	//ivec3 sign = ivec3(floatSign);
	ivec3 sign = ivec3(equal(modCoord, ivec3(0))) * -1 + ivec3(equal(modCoord, ivec3(WORKGROUP_SIZE - 1)));
	ivec3 range = KERNEL_HALF_SIZE * sign;
	ivec3 minRange = min(range, 0);
	ivec3 maxRange = max(range, 0);

	for (int k = minRange.z; k <= maxRange.z; ++k) {
		for (int j = minRange.y; j <= maxRange.y; ++j) {
			for (int i = minRange.x; i <= maxRange.x; ++i) {
				ivec3 neighborCoord = coord + ivec3(i, j, k);
				ivec3 neighborSharedCoord = sharedCoord + ivec3(i, j, k);
				int neighborFlatIndex = neighborSharedCoord.x + (SHARED_SIZE * neighborSharedCoord.y) + (SHARED_SIZE * SHARED_SIZE * neighborSharedCoord.z);
				sharedData[neighborFlatIndex] = imageLoad(SourceMeshSDF, neighborCoord).x;
			}
		}
	}
}
#endif

void main() {
	
    ivec3 coord = ivec3(gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID);

#ifdef SHARED_MEMORY
	populateSharedMemory(coord);
	barrier();
#endif

	ivec3 minBounds = clamp(coord - KERNEL_HALF_SIZE, ivec3(0), ivec3(SDF_TEXTURE_SIZE - 1));
	ivec3 maxBounds = clamp(coord + KERNEL_HALF_SIZE, ivec3(0), ivec3(SDF_TEXTURE_SIZE - 1));

	CurrentState current;
	current.coord = coord;
	current.normal = sdfNormal(coord, 1);
#ifdef SHARED_MEMORY
	current.sdf = sharedSDF(coord, coord);
#else
	current.sdf = sdf(coord);
#endif
	current.position = vec3(coord / float(SDF_TEXTURE_SIZE));

	float delta = 0.0;
	KernelSum = 0.0;

	for (int k = minBounds.z; k <= maxBounds.z; ++k) {
		for (int j = minBounds.y; j <= maxBounds.y; ++j) {
			for (int i = minBounds.x; i <= maxBounds.x; ++i) {
				KernelInput kInput;		
				CreateKernelInput(coord, ivec3(i,j,k), kInput);
				delta += KERNEL_DISPLACEMENT_FUNCTION(current, kInput);
			}
		}
	}

	if(KernelSum != 0.0)
		delta /= KernelSum;
	
	delta += MAIN_DISPLACEMENT_FUNCTION(current);

	//imageStore(TargetMeshSDF, coord, vec4(current.sdf + delta));
}